#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Mar 02, 2020 06:01:18 PM +0200  platform: Windows NT

import sys
import tkinter.messagebox
import main_client
import meal
from order import *
import select_ing_gui

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

from PIL import Image, ImageTk
import os.path
import globals

def on_closing():
    global client, root
    client.soc.close()
    root.destroy()


def vp_start_gui(main_client_obj):
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    global top, client

    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    client = main_client_obj
    top = ClientPage(root)
    top.main_client = main_client_obj
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()


w = None


def create_ClientPage(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_ClientPage(root, *args, **kwargs)' .'''
    global w, w_win, root, top
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = ClientPage(w)
    return (w, top)


def destroy_ClientPage():
    global w
    w.destroy()
    w = None

def sandwich_click():
    globals.current_meal = meal.Sandwich(globals.ing_map, globals.meals_map)
    select_ing_gui.show()

def burger_clieked():
    globals.current_meal = meal.Burger(globals.ing_map, globals.meals_map)
    select_ing_gui.show()


def pizza_click():
    globals.current_meal = meal.Pizza(globals.ing_map, globals.meals_map)
    select_ing_gui.show()


def salad_click():
    globals.current_meal = meal.Salad(globals.ing_map, globals.meals_map)
    select_ing_gui.show()


def clean_lst():
    global top
    top.meals_lst.delete(0, tk.END)


def render_lst():
    global top

    i = 0
    total_price = 0
    total_sec = 0
    for m in globals.cart:
        print('add')
        top.meals_lst.insert(i, str(m))
        total_price += m.price
        total_sec += m.seconds
        i += 1
    top.price_l.configure(text="Total price: " + str(total_price) + '$')
    top.time_l.configure(text="Total sec: " + str(total_sec))


class ClientPage:

    def del_meal(self):
        selection = self.meals_lst.curselection()
        index = selection[0]
        clean_lst()
        print(index)
        del (globals.cart[index])
        total_price = 0
        total_sec = 0
        i = 0
        for m in globals.cart:
            total_price += m.price
            total_sec += m.seconds
            i += 1
        self.price_l.configure(text="Total price: " + str(total_price) + '$')
        self.time_l.configure(text="Total sec: " + str(total_sec))
        render_lst()

    def create_order(self):
        priority = self.priority_b.current()
        order = Order(priority)
        for m in globals.cart:
            order.meals_lst.append(m)
        order.order_id = self.main_client.send_order(order)
        clean_lst()
        globals.cart = []
        globals.current_meal = None
        tkinter.messagebox.showinfo(title="Info", message="Your order: " + str(order.order_id) + " added to the queue")
        self.time_l.configure(text='Total sec: 0')
        self.price_l.configure(text='Total price: 0$')

    def __init__(self, top=None):
        self.index = 0
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 13 -weight bold"

        top.geometry("1000x700+541+118")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        globals.main_win = top

        self.meals_label = tk.Label(top)
        self.meals_label.place(relx=-0.01, rely=0.029, height=42, width=220)
        self.meals_label.configure(background="#d9d9d9")
        self.meals_label.configure(disabledforeground="#a3a3a3")
        self.meals_label.configure(font=font9)
        self.meals_label.configure(foreground="#800000")
        self.meals_label.configure(text='''Add a Meal''')

        self.burger_b = tk.Button(top, command=burger_clieked)
        self.burger_b.place(relx=0.05, rely=0.133, height=64, width=82)
        self.burger_b.configure(activebackground="#ececec")
        self.burger_b.configure(activeforeground="#000000")
        self.burger_b.configure(background="#d9d9d9")
        self.burger_b.configure(disabledforeground="#a3a3a3")
        self.burger_b.configure(foreground="#000000")
        self.burger_b.configure(highlightbackground="#d9d9d9")
        self.burger_b.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "burger.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(file=photo_location)
        self.burger_b.configure(image=_img0)
        self.burger_b.configure(pady="0")
        self.burger_b.configure(text='''Button''')

        self.salad_b = tk.Button(top, command=salad_click)
        self.salad_b.place(relx=0.05, rely=0.311, height=63, width=82)
        self.salad_b.configure(activebackground="#ececec")
        self.salad_b.configure(activeforeground="#000000")
        self.salad_b.configure(background="#d9d9d9")
        self.salad_b.configure(disabledforeground="#a3a3a3")
        self.salad_b.configure(foreground="#000000")
        self.salad_b.configure(highlightbackground="#d9d9d9")
        self.salad_b.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "salad.jpg")
        global _img1
        _img1 = ImageTk.PhotoImage(file=photo_location)
        self.salad_b.configure(image=_img1)
        self.salad_b.configure(pady="0")
        self.salad_b.configure(text='''Button''')

        self.pizza_b = tk.Button(top, command=pizza_click)
        self.pizza_b.place(relx=0.05, rely=0.511, height=63, width=82)
        self.pizza_b.configure(activebackground="#ececec")
        self.pizza_b.configure(activeforeground="#000000")
        self.pizza_b.configure(background="#d9d9d9")
        self.pizza_b.configure(disabledforeground="#a3a3a3")
        self.pizza_b.configure(foreground="#000000")
        self.pizza_b.configure(highlightbackground="#d9d9d9")
        self.pizza_b.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "pizza.jpg")
        global _img2
        _img2 = ImageTk.PhotoImage(file=photo_location)
        self.pizza_b.configure(image=_img2)
        self.pizza_b.configure(pady="0")
        self.pizza_b.configure(text='''Button''')

        self.sand_b = tk.Button(top, command=sandwich_click)
        self.sand_b.place(relx=0.05, rely=0.7, height=63, width=82)
        self.sand_b.configure(activebackground="#ececec")
        self.sand_b.configure(activeforeground="#000000")
        self.sand_b.configure(background="#d9d9d9")
        self.sand_b.configure(disabledforeground="#a3a3a3")
        self.sand_b.configure(foreground="#000000")
        self.sand_b.configure(highlightbackground="#d9d9d9")
        self.sand_b.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location, "sandwich.jpg")
        global _img3
        _img3 = ImageTk.PhotoImage(file=photo_location)
        self.sand_b.configure(image=_img3)
        self.sand_b.configure(pady="0")
        self.sand_b.configure(text='''Button''')


        self.ok_b = tk.Button(top, command=self.create_order)
        self.ok_b.place(relx=0.05, rely=0.871, height=33, width=55)
        self.ok_b.configure(activebackground="#ececec")
        self.ok_b.configure(activeforeground="#000000")
        self.ok_b.configure(background="#d9d9d9")
        self.ok_b.configure(disabledforeground="#a3a3a3")
        self.ok_b.configure(foreground="#000000")
        self.ok_b.configure(highlightbackground="#d9d9d9")
        self.ok_b.configure(highlightcolor="black")
        self.ok_b.configure(pady="0")
        self.ok_b.configure(text='''Pay''')

        self.meals_lst = tk.Listbox(top)
        self.meals_lst.place(relx=0.15, rely=0.222, relheight=0.573
                             , relwidth=0.7)
        self.meals_lst.configure(background="white")
        self.meals_lst.configure(disabledforeground="#a3a3a3")
        self.meals_lst.configure(font="TkFixedFont")
        self.meals_lst.configure(foreground="#000000")

        self.del_b = tk.Button(top, command=self.del_meal)
        self.del_b.place(relx=0.87, rely=0.3, height=40, width=120)
        self.del_b.configure(activebackground="#ececec")
        self.del_b.configure(activeforeground="#000000")
        self.del_b.configure(background="#d9d9d9")
        self.del_b.configure(disabledforeground="#a3a3a3")
        self.del_b.configure(foreground="#000000")
        self.del_b.configure(highlightbackground="#d9d9d9")
        self.del_b.configure(highlightcolor="black")
        self.del_b.configure(pady="0")
        self.del_b.configure(text='''Delete selected meal''')

        self.price_l = tk.Label(top)
        self.price_l.place(relx=0.85, rely=0.4, height=15, width=180)
        self.price_l.configure(background="#d9d9d9")
        self.price_l.configure(disabledforeground="#a3a3a3")
        self.price_l.configure(font=font9)
        self.price_l.configure(foreground="#800000")
        self.price_l.configure(text='''Total price: ''')

        self.time_l = tk.Label(top)
        self.time_l.place(relx=0.85, rely=0.45, height=15, width=180)
        self.time_l.configure(background="#d9d9d9")
        self.time_l.configure(disabledforeground="#a3a3a3")
        self.time_l.configure(font=font9)
        self.time_l.configure(foreground="#800000")
        self.time_l.configure(text='''Total sec: ''')

        self.priority_l = tk.Label(top)
        self.priority_l.place(relx=0.18, rely=0.84, height=15, width=120)
        self.priority_l.configure(background="#d9d9d9")
        self.priority_l.configure(disabledforeground="#a3a3a3")
        self.priority_l.configure(font=font9)
        self.priority_l.configure(foreground="#800000")
        self.priority_l.configure(text='''Priority: ''')

        self.priority_b = ttk.Combobox(top)
        self.priority_b.place(relx=0.3, rely=0.81, relheight=0.058, relwidth=0.312)
        self.priority_b.configure(takefocus="")

        priority_lst = []
        for p in Priority:
            priority_lst.append(p.name)
        priority_lst.reverse()

        self.priority_b['values'] = priority_lst
        self.priority_b.current(0)


def show(main_client_obj):
    vp_start_gui(main_client_obj)
